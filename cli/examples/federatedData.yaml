methods:
  content.requestDetails:
    response: |
      function f(ctx, params) {
        const ccs = ctx.get('federatedValue');
        console.log("PARAMS -> ", params);
        console.log("ccs -> ", ccs);
        console.log("### value of ctx inside discovery.onPullEntityInfo of yaml", ctx);

        const msg = 'Post trigger for discovery.onRequestUserInterest';
        ctx.sendBroadcastEvent('discovery.onPullEntityInfo', ccs, msg);
        console.log("Broadcasted discovery.onPullEntityInfo event");

        // Simulate the delay asynchronously and return the Promise
        return ctx.delay(30000).then(() => {
          console.log("Wait is over.");
          const values = ctx.get('federatedResponse');
          console.log("updated values------:", values);
          // Resolve the Promise with the updated values
          return values;
        });
      }
  discovery.entityInfo:
    response: |
      function f(ctx, params) {
        console.log('params-----:', params);
        ctx.set('federatedResponse', params.result, '~A');
        return true;
      }